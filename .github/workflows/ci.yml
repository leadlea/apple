name: Mac Status PWA CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test Suite
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Create required directories
      run: |
        mkdir -p logs models/elyza7b frontend/icons config tests
        
    - name: Validate configuration
      run: |
        python config/production.py
        
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/ config/
        isort --check-only backend/ config/
        
    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --cov=backend --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration_*.py -v
        
    - name: Test PWA functionality
      run: |
        python test_pwa_functionality.py
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          logs/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r backend/ config/ -f json -o bandit-report.json
        
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build and Package
    runs-on: macos-latest
    needs: [test, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        
    - name: Create distribution package
      run: |
        # Create a clean distribution
        mkdir -p dist/mac-status-pwa
        
        # Copy application files
        cp -r backend/ dist/mac-status-pwa/
        cp -r frontend/ dist/mac-status-pwa/
        cp -r config/ dist/mac-status-pwa/
        cp -r tests/ dist/mac-status-pwa/
        cp requirements.txt dist/mac-status-pwa/
        cp setup.py dist/mac-status-pwa/
        cp README.md dist/mac-status-pwa/
        cp LICENSE dist/mac-status-pwa/ || echo "No LICENSE file found"
        
        # Create startup scripts
        cp start.sh dist/mac-status-pwa/ || echo "No start.sh found"
        
        # Create archive
        cd dist
        tar -czf mac-status-pwa-${{ github.event.release.tag_name }}.tar.gz mac-status-pwa/
        zip -r mac-status-pwa-${{ github.event.release.tag_name }}.zip mac-status-pwa/
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/mac-status-pwa-${{ github.event.release.tag_name }}.tar.gz
        asset_name: mac-status-pwa-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload ZIP release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/mac-status-pwa-${{ github.event.release.tag_name }}.zip
        asset_name: mac-status-pwa-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material
        
    - name: Build documentation
      run: |
        # Create basic documentation structure
        mkdir -p docs
        echo "# Mac Status PWA Documentation" > docs/index.md
        echo "## Installation" >> docs/index.md
        echo "Run \`python setup.py\` to install the application." >> docs/index.md
        echo "## Usage" >> docs/index.md
        echo "Start the application with \`./start.sh\` or \`python backend/main.py\`" >> docs/index.md
        
        # Create mkdocs config
        cat > mkdocs.yml << EOF
        site_name: Mac Status PWA
        site_description: Personalized Mac monitoring PWA with ELYZA LLM
        theme:
          name: material
          palette:
            primary: blue
            accent: blue
        nav:
          - Home: index.md
        EOF
        
        mkdocs build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site

  performance-test:
    name: Performance Testing
    runs-on: macos-latest
    needs: [test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: Run performance tests
      run: |
        python test_performance_benchmark.py
        python test_memory_optimization.py
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          performance_results.json
          memory_profile.txt